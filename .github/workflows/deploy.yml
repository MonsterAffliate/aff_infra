name: Deploy Traefik Reverse Proxy

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install SSH Key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: unnecessary

      - name: Generate .env file
        run: |
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" > .env
          echo "CERTBOT_EMAIL=${{ vars.CERTBOT_EMAIL }}" >> .env

      - name: Add Known Hosts
        run: |
          ssh-keyscan -H ${{ secrets.SERVER_DOMAIN }} >> ~/.ssh/known_hosts

      - name: Deploy with Docker Compose
        run: |
          rsync -avz --progress --delete -e "ssh" ./ ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_DOMAIN }}:~/aff_infra/
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_DOMAIN }} << 'EOF'
            mkdir -p ~/aff_infra
            cd ~/aff_infra

            echo "${{ github.sha }}" > deploy_version.txt

            docker-compose pull
            docker-compose up -d --build --force-recreate --remove-orphans

            # Wait for Traefik to be ready via dashboard
            timeout 60s bash -c "until curl -s -f http://localhost:8080/dashboard/; do sleep 2; echo 'Checking Traefik dashboard...'; done" || {
              echo "Traefik dashboard check failed, rolling back..."
              docker-compose down
              docker-compose logs traefik
              exit 1
            }

            # Optional: Check an app endpoint (e.g., topchat.cam)
            timeout 60s bash -c "until curl -s -f -H 'Host: topchat.cam' http://localhost:80; do sleep 2; echo 'Checking topchat.cam...'; done" || {
              echo "App routing check failed, rolling back..."
              docker-compose down
              docker-compose logs traefik
              exit 1
            }

            docker image prune -f
            docker container prune -f
            docker volume prune -f
            docker network prune -f
          EOF