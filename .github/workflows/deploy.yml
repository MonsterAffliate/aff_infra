name: Deploy Nginx Reverse Proxy

on:
  push:
    branches:
      - master  # Trigger on push to main branch

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up SSH key
      - name: Install SSH Key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: unnecessary

      # Step 3: Add Known Hosts
      - name: Add Known Hosts
        run: |
          ssh-keyscan -H ${{ secrets.SERVER_DOMAIN }} >> ~/.ssh/known_hosts

      # Step 4: Debug Connectivity (optional, keep for troubleshooting)
      - name: Debug Connectivity
        run: |
          echo "Attempting to reach ${{ secrets.SERVER_DOMAIN }}"
          ping -c 4 ${{ secrets.SERVER_DOMAIN }} || echo "Ping failed"
          nc -zv ${{ secrets.SERVER_DOMAIN }} 22 || echo "SSH port check failed"

      # Step 5: Deploy to Home Server with Minimal Downtime
      - name: Deploy with Docker Compose
        run: |
          # Transfer files to server efficiently
          rsync -avz --progress --delete -e "ssh" ./ ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_DOMAIN }}:~/aff_infra/

          # SSH to deploy with minimal downtime
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_DOMAIN }} << 'EOF'
            mkdir -p ~/aff_infra
            cd ~/aff_infra

            # Store deployment version
            echo "${{ github.sha }}" > deploy_version.txt

            # Pull latest images and build
            docker-compose pull
            docker-compose build

            # Start new containers in the background (detached mode)
            docker-compose up -d --no-deps --scale nginx=2 --force-recreate

            # Wait for new containers to be healthy (assumes healthcheck in docker-compose.yml)
            echo "Waiting for containers to be healthy..."
            timeout 60s bash -c "until docker-compose ps | grep 'healthy'; do sleep 5; done" || {
              echo "Health check failed or timed out, rolling back..."
              docker-compose stop
              exit 1
            }

            # Stop and remove old containers gracefully
            docker-compose down --remove-orphans

            # Clean up unused images and containers
            docker image prune -f
            docker container prune -f

            # Verify deployment
            docker-compose ps
          EOF